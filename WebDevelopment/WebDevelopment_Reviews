INTRODUCTION TO HTML
Review

Congratulations on completing the first lesson of HTML! You are well on your way to becoming a skilled web developer.

Let's review what you've learned so far:

1.HTML stands for HyperText Markup Language and is used to create the structure and content of a webpage.
2.Most HTML elements contain opening and closing tags with raw text or other HTML tags between them.
HTML elements can be nested inside other elements. The enclosed element is the child of the enclosing parent element.
3.Any visible content should be placed within the opening and closing <body> tags .
4.Headings and sub-headings, <h1> to <h6> tags, are used to enlarge text.
5.<p>, <span> and <div> tags specify text or blocks.
6.The <em> and <strong> tags are used to emphasize text.
7.Line breaks are created with the <br> tag.
8.Ordered lists (<ol>) are numbered and unordered lists (<ul>) are bulleted.
9.Images (<img>) and videos (<video>) can be added by linking to an existing source.
In the next lesson, we'll take the content that you've added to this website and transform it into an HTML document that's ready to go on the web!

Instructions
We've left you with your final code. Feel free to play around and modify it using the new elements you've learned!

If you want to see how to review how structure HTML in a project and use semantically meaningful elements, watch the video below and follow along with one of our experts

----------------------------------------------------
HTML DOCUMENT STANDARDS
HTML Tags

You now know all of the basic elements and set-up you need to structure an HTML page and add different types of content. With the help of CSS, very soon you’ll be creating beautiful websites!

While some tags have a very specific purpose, such as image and video tags, most tags are used to describe the content that they surround, which helps us modify and style our content later. There are seemingly infinite numbers of tags to use (many more than we've taught). Knowing when to use each one is based on how you want to describe the content of your HTML. Descriptive, well-chosen tags are one key to high-quality web development. A full list of available HTML tags can be found in Mozilla documentation.

Let’s review what you’ve learned this lesson:

1.The <!DOCTYPE html> declaration should always be the first line of code in your HTML files. This lets the browser know what version of HTML to expect.
2.The <html> element will contain all of your HTML code.
3.Information about the web page, like the title, belongs within the <head> of the page.
4.You can add a title to your web page by using the <title> element, inside of the head.
5.A webpage's title appears in a browser's tab.
6.Anchor tags (<a>) are used to link to internal pages, external pages or content on the same page.
7.You can create sections on a webpage and jump to them using <a> tags and adding ids to the elements you wish to jump to.
8.Whitespace between HTML elements helps make code easier to read while not changing how elements appear in the browser.
9.Indentation also helps make code easier to read. It makes parent-child relationships visible.
10.Comments are written in HTML using the following syntax: <!-- comment -->.

Take some time to edit the workspace you created and observe how it changes!

--------------------------------------------------------------------
TABLES
HTML Tables

Great job! In this lesson, you learned how to create a table, add data to it, and section the table into smaller parts that make it easier to read.

Let's review what you've learned so far:

1.The <table> element creates a table.
2.The <tr> element adds rows to a table.
3.To add data to a row, you can use the <td> element.
4.Table headings clarify the meaning of data. Headings are added with the <th> element.
5.Table data can span columns using the colspan attribute.
6.Table data can span rows using the rowspan attribute.
7.Tables can be split into three main sections: a head, a body, and a footer.
8.A table's head is created with the <thead> element.
9.A table's body is created with the <tbody> element.
10.A table's footer is created with the <tfoot> element.
11.All the CSS properties you learned about in this course can be applied to tables and their data.

Congratulations on completing HTML Tables!

------------------------------------------------------------------------
1/1/2019

CSS SETUP AND SELECTORS
Review CSS Selectors

Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let's review what you learned:

CSS can change the look of HTML elements. In order to do this, CSS must select HTML elements, then apply styles to them.
CSS can select HTML elements by tag, class, or ID.
Multiple CSS classes can be applied to one HTML element.
Classes can be reusable, while IDs can only be used once.
IDs are more specific than classes, and classes are more specific than tags. That means IDs will override any styles from a class, and classes will override any styles from a tag selector.
Multiple selectors can be chained together to select an element. This raises the specificity, but can be necessary.
Nested elements can be selected by separating selectors with a space.
The !important flag will override any style, however it should almost never be used, as it is extremely difficult to override.
Multiple unrelated selectors can receive the same styles by separating the selector names with commas.
Great work this lesson. With this knowledge, you'll be able to use CSS to change the look and feel of websites to make them look great.

---------------------------------------------------------------------
2/1/2019

CSS VISUAL RULES
Review Visual Rules

Incredible work! You used CSS to alter text and images throughout a website. Throughout this lesson, you learned concepts including:

CSS declarations are structured into property and value pairs.
The font-family property defines the typeface of an element.
font-size controls the size of text displayed.
font-weight defines how thin or thick text is displayed.
The text-align property places text in the left, right, or center of its parent container.
Text can have two different color attributes: color and background-color. color defines the color of the text, while background-color defines the color behind the text.
CSS can make an element transparent with the opacity property.
CSS can also set the background of an element to an image with the background-image property.

------------------------------------------------------------
THE BOX MODEL
Review

In this lesson, we covered the four properties of the box model: height and width, padding, borders, and margins. Understanding the box model is an important step towards learning more advanced HTML and CSS topics. Let's take a minute to review what you learned.

The box model comprises a set of properties used to create space around and between HTML elements.
The height and width of a content area can be set in pixels or percentage.
Borders surround the content area and padding of an element. The color, style, and thickness of a border can be set with CSS properties.
Padding is the space between the content area and the border. It can be set in pixels or percent.
Margin is the amount of spacing outside of an element's border.
Horizontal margins add, so the total space between the borders of adjacent elements is equal to the sum of the right margin of one element and the left margin of the adjacent element.
Vertical margins collapse, so the space between vertically adjacent elements is equal to the larger margin.
margin: 0 auto horizontally centers an element inside of its parent content area, if it has a width.
The overflow property can be set to display, hide, or scroll, and dictates how HTML will render content that overflows its parent's content area.
The visibility property can hide or show elements.

-------------------------------------------
CHANGING THE BOX MODEL
Review: Changing the Box Model

In this lesson, you learned about an important limitation of the default box model: box dimensions are affected by border thickness and padding.

Let's review what you learned:

In the default box model, box dimensions are affected by border thickness and padding.
The box-sizing property controls the box model used by the browser.
The default value of the box-sizing property is content-box.
The value for the new box model is border-box.
The border-box model is not affected by border thickness or padding.

-----------------------------------------------------------
03/01/2019

CSS DISPLAY AND POSITIONING
Review: Layout

Great job! In this lesson, you learned how to control the positioning of elements on a web page.

Let's review what you've learned so far:

The position property allows you to specify the position of an element in three different ways.
When set to relative, an element's position is relative to its default position on the page.
When set to absolute, an element's position is relative to its closest positioned parent element. It can be pinned to any part of the web page, but the element will still move with the rest of the document when the page is scrolled.
When set to fixed, an element's position can be pinned to any part of the web page. The element will remain in view no matter what.
The z-index of an element specifies how far back or how far forward an element appears on the page when it overlaps other elements.
The display property allows you control how an element flows vertically and horizontally a document.
inline elements take up as little space as possible, and they cannot have manually-adjusted width or height.
block elements take up the width of their container and can have manually-adjusted heights.
inline-block elements can have set width and height, but they can also appear next to each other and do not take up their entire container width.
The float property can move elements as far left or as far right as possible on a web page.
You can clear an element's left or right side (or both) using the clear property.
When combined with an understanding of the box model, positioning can create visually appealing web pages. So far, we've focused on adding content in the form of text to a web page. In the next unit, you'll learn how to add and manipulate images to a web page.

----------------------------------------------------
CSS COLOR
Color Review

We've completed our extensive tour of the colors in CSS! Let's review the key information we've learned.

There are four ways to represent color in CSS:

Named colors — there are 147 named colors, which you can review here.

Hexadecimal or hex colors

Hexadecimal is a number system with has sixteen digits, 0 to 9 followed by "A" to "F".
Hex values always begin with # and specify values of red, blue and green using hexademical numbers such as #23F41A.
RGB

RGB colors use the rgb() syntax with one value for red, one value for blue and one value for green.
RGB values range from 0 to 255 and look like this: rgb(7, 210, 50).
HSL

HSL stands for hue (the color itself), saturation (the intensity of the color), and lightness (how light or dark a color is).
Hue ranges from 0 to 360 and saturation and lightness are both represented as percentages like this: hsl(200, 20%, 50%).
You can add opacity to color in RGB and HSL by adding a fourth value, a, which is represented as a percentage.

Great job! Feel empowered to add a bit of color to each of your projects!

----------------------------------------------------------------------
04/01/2019

CSS TYPOGRAPHY
Review

Great job! You learned how to style an important aspect of the user experience, typography.

Let's review what you've learned so far:

Typography is the art of arranging text on a page.

Text can appear in any number of weights, with the font-weight property.

Text can appear in italics with the font-style property.

The vertical spacing between lines of text can be modified with the line-height property.

Serif fonts have extra details on the ends of each letter. Sans-Serif fonts do not.

Fallback fonts are used when a certain font is not installed on a user's computer.

Google Fonts provides free fonts that can be used in an HTML file with the <link> tag or the @font-face property.

Local fonts can be added to a document with the @font-face property and the path to the font's source.

The word-spacing property changes how far apart individual words are.

The letter-spacing property changes how far apart individual letters are.

The text-align property changes the horizontal alignment of text.

-------------------------------------------
CODE CHALLENGE: CSS DESIGN
CSS Code Challenges Review

Great job on completing the CSS code challenges!

To recap on what you just practiced:

Edited an image to make it round.
Targeted specific elements' CSS.
Transferred inline CSS to a stylesheet.
Refactored a CSS stylesheet to remove extra selectors.
Manipulated padding and margin to align elements.
Added a fallback font just in case a font can't be displayed.
Separated declarations using semicolons.
Changed the display property of an element.
Assigned the position of elements to overlap.

---------------------------------------------------
SIZING ELEMENTS
Review: Relative Measurements

Great work! You learned how to size elements on a website relative to other elements on the page.

Let's review what you learned:

Content on a website can be sized relative to other elements on the page using relative measurements.
The unit of em sizes font relative to the font size of a parent element.
The unit of rem sizes font relative to the font size of a root element. That root element is the <html> element.
Percentages are commonly used to size box-model features, like the width, height, padding, or margin of an element.
When percentages are used to size width and height, child elements will be sized relative to the dimensions of their parent (remember that parent dimensions must first be set).
Percentages can be used to set padding and margin. Horizontal and vertical padding and margin are set relative to the width of a parent element.
The minimum and maximum width of elements can be set using min-width and max-width.
The minimum and maximum height of elements can be set using min-height and max-height.
When the height of an image or video is set, then its width can be set to auto so that the media scales proportionally. Reversing these two properties and values will also achieve the same result.
A background image of an HTML element will scale proportionally when its background-size property is set to cover.
Relative units of measurement are a first step towards incorporating responsive design in a website. When combined with more advanced responsive techniques, you can create a seamless user experience regardless of a device's screen size.

-------------------------------------------------------------
05/01/2019

MEDIA QUERIES
Review: Media Queries

Incredible work! You learned how to change the way a website appears on different screens with media queries and breakpoints

Throughout this lesson, you learned:

When a website responds to the size of the screen it's viewed on, it’s called a responsive website.
You can write media queries to help with different screen sizes.
Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
Media features can detect many aspects of a user's browser, including the screen's width, height, resolution, orientation, and more.
The and operator requires multiple media features to be true at once.
A comma separated list of media features only requires one media feature to be true for the code within to be applied.
The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. Natural breakpoints are found by resizing the browser.
With your knowledge of media queries and CSS, you can make websites that look great on any device, from a small phone to a huge television. By making your websites responsive, you'll make it possible for any of your users to have a great experience.

----------------------------------------------------------------

07/01/2019

FLEXBOX
Review: Flexbox

You should be proud of yourself! You have learned the most important properties of flexbox. Flexbox is an art and a science; you can use it to make laying out multiple elements a piece of cake. You know everything necessary to begin using it in your own projects.

display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-content is used to space items along the major axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the major axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the major axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the major and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.
Let’s apply a few of the properties you’ve learned to arrange one section of the web page in the browser to the right!

--------------------------------------------------------------
08/01/2019
DEBUGGING JAVASCRIPT CODE
Debugging Review

You just learned a lot of techniques for helping you get unstuck in all debugging situations. Congratulations! Let's synthesize everything you learned into one debugging process.

Is your code throwing errors? If so, read the error stack trace for the type, description, and location of the error. Go to the error's location and try to fix.
Is your code broken but not throwing errors? Walk through your code using console.log() statements. When unexpected results occur, isolate the bug and try to fix it.
Did you locate the bug using steps 1 and 2, but can't fix the bug? Consult documentation to make sure you are using all JavaScript functionality properly. If you are still stuck, Google your issue and consult Stack Overflow for help. Read solutions or post your own Stack Overflow question if none exist on the topic.
It may take some time and practice, but this is how all developers work through their issues, so don't give up, and you'll be an expert in no time.

Congratulations again on learning all of these new techniques. Let's give them one more round of practice so you can see how much progress you've made!

---------------------------------------------------------------
LEARN JAVASCRIPT: ERROR HANDLING
Error Handling Review

Great job with handling errors!

In this lesson we went over:

How mistakes in programming leads to errors.
Why errors are useful for developers.
Errors will prevent a program from executing unless it is handled.
How to create an error using the Error() function.
How to throw an error object using the throw keyword.
How to use the try...catch statement to handle thrown errors.
Evaluating code in a try block to anticipate errors.
Catching the error in a catch block to allow our program to continue running.
Why the try...catch statement would be useful in a program.
Now you have the ability to create code that doesn't break when an error is thrown!

------------------------------------------------------------------------
09/01/2019

JAVASCRIPT PROMISES
Review

Awesome job! Promises are a difficult concept even for experienced developers, so pat yourself on the back. You've learned a ton about asynchronous JavaScript and promises. Let's review:

Promises are JavaScript objects that represent the eventual result of an asynchronous operation.
Promises can be in one of three states: pending, resolved, or rejected.
A promise is settled if it is either resolved or rejected.
We construct a promise by using the new keyword and passing an executor function to the Promise constructor method.
setTimeout() is a Node function which delays the execution of a callback function using the event-loop.
We use .then() with a success handler callback containing the logic for what should happen if a promise resolves.
We use .catch() with a failure handler callback containing the logic for what should happen if a promise rejects.
Promise composition enables us to write complex, asynchronous code that's still readable. We do this by chaining multiple .then()'s and .catch()'s.
To use promise composition correctly, we have to remember to return promises constructed within a .then().
We should chain multiple promises rather than nesting them.
To take advantage of concurrency, we can use Promise.all().

-------------------------------------------------------------
09/01/2019

ASYNC AWAIT
Review

Awesome work getting the hang of the async...await syntax! Let's review what you've learned:

async...await is syntactic sugar built on native JavaScript promises and generators.
We declare an async function with the keyword async.
Inside an async function we use the await operator to pause execution of our function until an asynchronous action completes and the awaited promise is no longer pending .
await returns the resolved value of the awaited promise.
We can write multiple await statements to produce code that reads like synchronous code.
We use try...catch statements within our async functions for error handling.
We should still take advantage of concurrency by writing async functions that allow asynchronous actions to happen in concurrently whenever possible.

-----------------------------------------------------
10/01/2019

REQUESTS I
Review Requests I

You’ve done an amazing job navigating through making XHR GET and POST requests! Take some time to review the core concepts before moving on to the next lesson.

JavaScript is the language of the web because of its asynchronous capabilities. AJAX, which stands for Asynchronous JavaScript and XML, is a set of tools that are used together to take advantage of JavaScript's asynchronous capabilities.

There are many HTTP request methods, two of which are GET and POST.

GET requests only request information from other sources.

POST methods can introduce new information to other sources in addition to requesting it.

GET requests can be written using an XMLHttpRequest object and vanilla JavaScript.

POST requests can also be written using an XMLHttpRequest object and vanilla JavaScript.

Writing GET and POST requests with XHR objects and vanilla JavaScript requires constructing the XHR object using new, setting the responseType, creating a function that will handle the response object, and opening and sending the request.

To add a query string to a URL endpoint you can use ? and include a parameter.

To provide additional parameters, use & and then include a key-value pair, joined by =.

Determining how to correctly write the requests and how to properly implement them requires carefully reading the documentation of the API with which you're working.

----------------------------------------------------

REQUESTS II
Review Requests II

Let's recap on the concepts covered in the previous exercises:

GET and POST requests can be created a variety of ways.

Use AJAX to asynchronously request data from APIs. fetch() and async/await are new functionalities developed in ES6 (promises) and ES8 respectively.

Promises are a new type of JavaScript object that represent data that will eventually be returned from a request.

fetch() is a web API that can be used to create requests. fetch() will return promises.

We can chain .then() methods to handle promises returned by fetch().

The .json() method converts a returned promise to a JSON object.

async is a keyword that is used to create functions that will return promises.

await is a keyword that is used to tell a program to continue moving through the message queue while a promise resolves.

await can only be used within functions declared with async.
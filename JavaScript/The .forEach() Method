const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below
//fruits.forEach(fruitsItem => console.log('I want to eat '+fruitsItem));

/*function printFruits(element){
  console.log('I want to eat '+element);
}

fruits.forEach(printFruits);

function printFruits(element){
  console.log('I want to eat '+element);
}*/

fruits.forEach(element =>
               console.log('I want to eat '+element) 
              );



// Iterate over fruits below
fruits.forEach(fruit => console.log(`I want to eat a ${fruit}.`))


-----------------------------------------------------------
//The .map() Method

//Use .map() to create a new array that contains the first character of each string in the animals array. 
//Save the new array to a const variable named secretMessage.


const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// Create the secretMessage array below

const secretMessage = animals.map(animal => animal[0]);

console.log(secretMessage.join(''));

const bigNumbers = [100, 200, 300, 400, 500];

// Create the smallNumbers array below
const smallNumbers = bigNumbers.map(num => num/100);

console.log(smallNumbers)



-----------------------------------------------------------
//The .filter() Method
/* filter() returns an array of elements after 
filtering out certain elements from the original array. 
The elements cause the callback function to return true are added to the new array.

*/

const randomNumbers = [375, 200, 3.14, 7, 13, 852];

// Call .filter() on randomNumbers below

const smallNumbers = randomNumbers.filter(element=>element<250);
console.log(smallNumbers);
const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];


// Call .filter() on favoriteWords below

const longFavoriteWords =  favoriteWords.filter(element=>element.length>7);
console.log(longFavoriteWords);

const check = ()=> 3;
console.log(check());
console.log(check);


-----------------------------------------------------------

//The .findIndex() Method

/*Calling .findIndex() on an array will return 
the index of the first element that evaluates to true in the callback function.
*/
const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];

const foundAnimal = animals.findIndex(element=>element==='elephant');
console.log(foundAnimal);

const startsWithS = animals.findIndex(element=>element[0]==='s');
console.log(startsWithS);


-------------------------------------------------------------
//The .reduce() Method
const newNumbers = [1, 3, 5, 7];

/*Declare a new variable named newSum = the return value of calling (invoking) 
.reduce() method on the newNumbers array and takes in a callback function as argument

The callback function has two parameters, accumulator and currentValue. 
The value of accumulator starts off as the value of the first element in the array 
and the currentValue starts as the second element.

The .reduce() method can also take an optional second parameter to 
set an initial value for accumulator 
(remember, the first argument is the callback function!)

*/
const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
}, 10);

console.log(newSum);


---------------------------------------------------------------------

const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

// Something is missing in the method call below

console.log(words.some(word => {
  return word.length < 6;
}));

// Use filter to create a new array

const interestingWords = words.filter(element=>element.length>5);

// Make sure to uncomment the code below and fix the incorrect code before running it

console.log(interestingWords.every((word) => { 
return word.length>5;
} ));


-----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------

const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama'];

const nums = [1, 50, 75, 200, 350, 525, 1000];

//  Choose a method that will return undefined
cities.forEach(city => console.log('Have you visited ' + city + '?'));

// Choose a method that will return a new array
const longCities = cities.filter(city => city.length > 7);

// Choose a method that will return a single value
const word = cities.reduce((acc, currVal) => {
  return acc + currVal[0]
}, "C");

console.log(word)

// Choose a method that will return a new array
const smallerNums = nums.map(num => num - 5);

// Choose a method that will return a boolean value
nums.some(num => num < 0);

-------------------------------------------------------
----------------------------------------------------
-----------------------------------------------

1.
Replace the word method in the first method call with a method that will do something to each of the values in the array and return undefined.

2.
In the second method call, replace the word method with a method that will return a new array with only those elements longer than 7 characters.

3.
In the third method call, replace the word method with a method that take an array that contains multiple values and returns a single value.

4.
In the fourth method call, replace the word method with a method that will return a new array of numbers returned from the function.

5.
In the fifth method call, replace the word method with a method that will return a boolean value.






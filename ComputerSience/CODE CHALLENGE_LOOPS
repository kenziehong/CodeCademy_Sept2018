#Write your function here
def divisible_by_ten(nums):
  count=0
  for item in nums:
    if item%10==0:
      count += 1
  return count
      

#Uncomment the line below when your function is done
print(divisible_by_ten([20, 25, 30, 35, 40]))


-------------------------------------

#Write your function here
def add_greetings(names):  
  new_lst = [
    "Hello, " + item
    for item in names
  ]
  return new_lst
  

#Uncomment the line below when your function is done
print(add_greetings(["Owen", "Max", "Sophie"]))


----------------------------------

//Delete Starting Even Numbers
#Write your function here
def delete_starting_evens_while(lst):
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst


def delete_starting_evens_for(lst):
  for item in lst:
    if item%2==0:
      lst = lst[1:]
  return lst #Result_miss 11 --not met require


def delete_starting_evens_for_2(lst):
  for index in range(0,len(lst)):
    if lst[index]%2==1:
      #lst = lst[index:] (IndexError: list index out of range)   
      return lst[index:] #Result_None, when every element in the list is even --not met require     
     
#Uncomment the lines below when your function is done
print(delete_starting_evens_for([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens_for([4, 8, 10]))

-----------------------------------------
Odd Indices

#Write your function here
def odd_indices(lst):
  new_lst=[
    lst[index]
    for index in range(len(lst))
    if index%2==1
  ]
  return new_lst


#Uncomment the line below when your function is done
print(odd_indices([4, 3, 7, 10, 11, -2]))

--------------------------------------------
Exponents

#Use nested for loops. The outer for loop should loop through all of the bases and the inner for loop should loop through all of the powers.
#Write your function here
def exponents(bases,powers):
  new_lst=[]
  for element in bases:
    for item in powers:
      tem=element**item
      new_lst.append(tem)
  return new_lst   


#Uncomment the line below when your function is done
print(exponents([2, 3, 4], [1, 2, 3]))

-------------------------------------------
Larger Sum

#Write your function here
def larger_sum(lst1, lst2):
  sum_lst1=0
  sum_lst2=0
  for element in lst1:
    sum_lst1 +=element
  for element in lst2:
    sum_lst2 +=element
  if sum_lst1>=sum_lst2:
    return lst1
  else:
    return lst2


#Uncomment the line below when your function is done
print(larger_sum([1, 9, 5], [2, 3, 7]))


-----------------------------------------

Over 9000

#Write your function here
def over_nine_thousand(lst):
  sum = 0
  for number in lst:
    sum += number
    if (sum > 9000):
      break
  return sum

def over_nine_thousand_2(lst):
  total=0
  i=0
  while i<len(lst) and total<9000:
    total += lst[i]
    i+=1
  return total

#Uncomment the line below when your function is done
print(over_nine_thousand_2([8000, 900, 120, 5000]))


---------------------------------------

Max Num
#Write your function here
def max_num(nums):
  maximum = nums[0]
  for number in nums:
    if number > maximum:
      maximum = number
  return maximum

#Uncomment the line below when your function is done
print(max_num([50, -10, 0, 75, 20]))

--------------------------

Same Values
#Write your function here
def same_values(lst1, lst2):
  new_lst = []
  for index in range(len(lst1)):
    if lst1[index] == lst2[index]:
      new_lst.append(index)
  return new_lst

#Uncomment the line below when your function is done
print(same_values([5, 1, -10, 3, 3], [5, 10, -10, 3, 5]))

---------------------------------

Reversed List

#Write your function here
def reversed_list(lst1, lst2):
  for index in range(len(lst1)):
    if lst1[index] != lst2[-1 + len(lst2)-index]:
      return False
  return True

def reversed_list_2(lst1, lst2):
  new_lst2=[]
  for index in range(len(lst2)):
    temp= lst2.pop()
    new_lst2.append(temp)
  if lst1==new_lst2:
    return True
  else:
    return False 
#Uncomment the lines below when your function is done
print(reversed_list_2([1, 2, 3], [3, 2, 1]))
print(reversed_list_2([1, 5, 3], [3, 2, 1]))